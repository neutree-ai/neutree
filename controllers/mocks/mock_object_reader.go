// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	scheme "github.com/neutree-ai/neutree/pkg/scheme"
	mock "github.com/stretchr/testify/mock"
)

// MockObjectReader is an autogenerated mock type for the ObjectReader type
type MockObjectReader struct {
	mock.Mock
}

type MockObjectReader_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectReader) EXPECT() *MockObjectReader_Expecter {
	return &MockObjectReader_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id
func (_m *MockObjectReader) Get(id string) (scheme.Object, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 scheme.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (scheme.Object, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) scheme.Object); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheme.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectReader_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockObjectReader_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
func (_e *MockObjectReader_Expecter) Get(id interface{}) *MockObjectReader_Get_Call {
	return &MockObjectReader_Get_Call{Call: _e.mock.On("Get", id)}
}

func (_c *MockObjectReader_Get_Call) Run(run func(id string)) *MockObjectReader_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockObjectReader_Get_Call) Return(_a0 scheme.Object, _a1 error) *MockObjectReader_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectReader_Get_Call) RunAndReturn(run func(string) (scheme.Object, error)) *MockObjectReader_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with no fields
func (_m *MockObjectReader) List() (scheme.ObjectList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 scheme.ObjectList
	var r1 error
	if rf, ok := ret.Get(0).(func() (scheme.ObjectList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() scheme.ObjectList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(scheme.ObjectList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockObjectReader_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockObjectReader_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockObjectReader_Expecter) List() *MockObjectReader_List_Call {
	return &MockObjectReader_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockObjectReader_List_Call) Run(run func()) *MockObjectReader_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockObjectReader_List_Call) Return(_a0 scheme.ObjectList, _a1 error) *MockObjectReader_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockObjectReader_List_Call) RunAndReturn(run func() (scheme.ObjectList, error)) *MockObjectReader_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectReader creates a new instance of MockObjectReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectReader {
	mock := &MockObjectReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
