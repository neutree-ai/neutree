// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockReconciler is an autogenerated mock type for the Reconciler type
type MockReconciler struct {
	mock.Mock
}

type MockReconciler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReconciler) EXPECT() *MockReconciler_Expecter {
	return &MockReconciler_Expecter{mock: &_m.Mock}
}

// Reconcile provides a mock function with given fields: obj
func (_m *MockReconciler) Reconcile(obj interface{}) error {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Reconcile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReconciler_Reconcile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reconcile'
type MockReconciler_Reconcile_Call struct {
	*mock.Call
}

// Reconcile is a helper method to define mock.On call
//   - obj interface{}
func (_e *MockReconciler_Expecter) Reconcile(obj interface{}) *MockReconciler_Reconcile_Call {
	return &MockReconciler_Reconcile_Call{Call: _e.mock.On("Reconcile", obj)}
}

func (_c *MockReconciler_Reconcile_Call) Run(run func(obj interface{})) *MockReconciler_Reconcile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockReconciler_Reconcile_Call) Return(_a0 error) *MockReconciler_Reconcile_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReconciler_Reconcile_Call) RunAndReturn(run func(interface{}) error) *MockReconciler_Reconcile_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReconciler creates a new instance of MockReconciler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReconciler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReconciler {
	mock := &MockReconciler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
