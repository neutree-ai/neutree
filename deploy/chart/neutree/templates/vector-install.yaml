---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "neutree.fullname" . }}-vector
  labels:
    {{ include "neutree.labels" . | nindent 4 }}
data:
  vector.yml: |-
    secret:
      jwt_secret:
        type: directory
        path: /etc/vector/cridentials/
    sources:
      kong_logs:
        type: http_server
        address: 0.0.0.0:30122
        encode: json
    transforms:
      parse_kong_logs:
        type: remap
        inputs:
          - kong_logs
        source: >
          . = parse_json!(.message)    

          # Access fields with hyphens using proper VRL syntax    

          if exists(.ai) && exists(.ai."statistics") && exists(.ai."statistics".usage) {
              # Extract fields one by one
              .extracted_data.request_id = .request.id
              .extracted_data.total_tokens = .ai."statistics".usage.total_tokens
              .extracted_data.prompt_tokens = .ai."statistics".usage.prompt_tokens
              .extracted_data.completion_tokens = .ai."statistics".usage.completion_tokens
              .extracted_data.timestamp = .started_at
              .extracted_data.status = .response.status
              .extracted_data.url_spilt = split!(.request.uri, "/")
              .extracted_data.endpoint_name = .extracted_data.url_spilt[4]  # endpoint name from /workspace/{workspace}/endpoint/{endpoint_name}
              .extracted_data.api_key_id = .consumer.custom_id    

              if to_int!(.extracted_data.total_tokens) > 0 {
                  ._has_usage = true
              } else {
                  ._has_usage = false
              }
          } else {
              ._has_usage = false
          }
      filter_usage_logs:
        type: filter
        inputs:
          - parse_kong_logs
        condition: ._has_usage == true
      prepare_postgrest_payload:
        type: remap
        inputs:
          - filter_usage_logs
        source: |
          . = {
              "p_api_key_id": .extracted_data.api_key_id,
              "p_request_id": .extracted_data.request_id,
              "p_usage_amount": .extracted_data.total_tokens,
              "p_endpoint_name": .extracted_data.endpoint_name
          }
    sinks:
      postgrest_rpc:
        type: http
        inputs:
          - prepare_postgrest_payload
        encoding:
          codec: json
        framing:
          method: newline_delimited
        compression: none
        uri: http://{{ include "neutree.fullname" . }}-api-service:3000/api/v1/rpc/record_api_usage
        method: post
        auth: 
          strategy: bearer
          token: "SECRET[jwt_secret.secret]"
        headers:
          content-type: application/json
        batch:
          max_events: 10
          timeout_secs: 1
---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "neutree.fullname" . }}-vector
  labels:
    {{ include "neutree.labels" . | nindent 4 }}
spec:
  ports:
    - name: aggregator-log
      port: 30122
      protocol: TCP
      targetPort: 30122
  selector:
    app.kubernetes.io/component: neutree-vector
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "neutree.fullname" . }}-vector
  labels:
    {{ include "neutree.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: neutree-vector
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/component: neutree-vector
    spec:
      {{- with.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "neutree.fullname" . }}-sa
      initContainers:
        - name: init-jwt-secret
          image: {{ .Values.jwtCli.image.repository }}:{{.Values.jwtCli.image.tag}}
          imagePullPolicy: {{ .Values.jwtCli.image.pullPolicy}}
          args:
            - encode
            - --secret
            - $(JWT_SECRET)
            - --out
            - /etc/vector/cridentials/secret
            - '{"role":"service_role"}'
          env:
            - name: JWT_SECRET
              value: {{.Values.jwtSecret}}
          volumeMounts:
            - name: jwt-secret
              mountPath: "/etc/vector/cridentials/"
      containers:
        - name: vector
          image: {{ .Values.vector.image.repository }}:{{ .Values.vector.image.tag}}
          imagePullPolicy: {{ .Values.vector.image.pullPolicy}}
          args:
            - --config-dir
            - /etc/vector/
          env:
            - name: VECTOR_LOG
              value: "info"
          ports:
            - name: aggregator-log
              containerPort: 30122
              protocol: TCP
              containerPort: 30122
          {{- with .Values.postgrest.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: jwt-secret
              mountPath: "/etc/vector/cridentials/"
            - name: data
              mountPath: "/vector-data-dir"
            - name: config
              mountPath: "/etc/vector/"
              readOnly: true
      terminationGracePeriodSeconds: 60
      volumes:
        - name: jwt-secret
          emptyDir: {}      
        - name: data
          emptyDir: {}
        - name: config
          projected:
            sources:
              - configMap:
                  name: {{ include "neutree.fullname" . }}-vector