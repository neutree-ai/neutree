sources:
  kong_logs:
    type: http_server
    address: 0.0.0.0:30122
    encode: json
transforms:
  parse_kong_logs:
    type: remap
    inputs:
      - kong_logs
    source: |
      . = parse_json!(.message)

      # Access fields with hyphens using proper VRL syntax

      if exists(.ai) && exists(.ai."proxy") && exists(.ai."proxy".usage) {
          # Extract fields one by one
          .extracted_data.request_id = .request.id
          .extracted_data.total_tokens = .ai."proxy".usage.total_tokens
          .extracted_data.prompt_tokens = .ai."proxy".usage.prompt_tokens
          .extracted_data.completion_tokens = .ai."proxy".usage.completion_tokens
          .extracted_data.timestamp = .started_at
          .extracted_data.status = .response.status
          .extracted_data.model = .ai."ai-proxy".meta.response_model
          .extracted_data.api_key_id = .consumer.custom_id

          if to_int!(.extracted_data.total_tokens) > 0 {
              ._has_usage = true
          } else {
              ._has_usage = false
          }
      } else {
          ._has_usage = false
      }
  filter_usage_logs:
    type: filter
    inputs:
      - parse_kong_logs
    condition: ._has_usage == true
  prepare_postgrest_payload:
    type: remap
    inputs:
      - filter_usage_logs
    source: |
      . = {
          "p_api_key_id": .extracted_data.api_key_id,
          "p_request_id": .extracted_data.request_id,
          "p_usage_amount": .extracted_data.total_tokens,
          "p_model": .extracted_data.model
      }
sinks:
  postgrest_rpc:
    type: http
    inputs:
      - prepare_postgrest_payload
    encoding:
      codec: json
    framing:
      method: newline_delimited
    compression: none
    uri: http://neutree-api:3000/api/v1/rpc/record_api_usage
    method: post
    auth:
      strategy: bearer
      token: {{ .JwtToken}}
    headers:
      Content-Type: application/json
    batch:
      max_events: 10
      timeout_secs: 1