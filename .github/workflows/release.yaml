name: release

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v0.1.0-nightly-20250405
  workflow_dispatch:
    inputs:
      tag:
        description: "the release tag (e.g : v0.1.0-nightly-20250405)"
        required: true
        type: string
      ui_version:
        description: "the ui release version (e.g : v0.1.0)"
        required: true
        type: string
      cluster_version:
        description: "the default cluster version (e.g : v1)"
        required: true
        type: string
jobs:
  build-amd64-image:
    env:
      UI_VERSION: ${{ secrets.RELEASE_UI_VERSION }}
      CLUSTER_VERSION: ${{ secrets.RELEASE_CLUSTER_VERSION }}
    runs-on: ubuntu-22.04
    name: build amd64 image
    steps:
      - uses: actions/checkout@v2
      - name: Check out specific tag when manually triggered
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch --all && git checkout ${{ github.event.inputs.tag }}
          echo "UI_VERSION=${{ github.event.inputs.ui_version }}" >> $GITHUB_ENV
          echo "CLUSTER_VERSION=${{ github.event.inputs.cluster_version }}" >> $GITHUB_ENV
      - name: Login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.IMAGE_PUSH_USERNAME }}
          password: ${{ secrets.IMAGE_PUSH_TOKEN }}
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: build amd64 image
        run: export ARCH=amd64; make docker-build && make docker-push
        env:
          IMAGE_PROJECT: ${{ secrets.RELEASE_IMAGE_PROJECT }}
          IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
  build-arm64-image:
    env:
      UI_VERSION: ${{ secrets.RELEASE_UI_VERSION }}
      CLUSTER_VERSION: ${{ secrets.RELEASE_CLUSTER_VERSION }}
    runs-on: ubuntu-22.04-arm
    name: build arm64 image
    steps:
      - uses: actions/checkout@v2
      - name: Check out specific tag when manually triggered
        if: github.event_name == 'workflow_dispatch'
        run: |
          git fetch --all && git checkout ${{ github.event.inputs.tag }}
          echo "UI_VERSION=${{ github.event.inputs.ui_version }}" >> $GITHUB_ENV
          echo "CLUSTER_VERSION=${{ github.event.inputs.cluster_version }}" >> $GITHUB_ENV
      - name: Login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.IMAGE_PUSH_USERNAME }}
          password: ${{ secrets.IMAGE_PUSH_TOKEN }}
      - name: Set up go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
      - name: build arm64 image
        run: export ARCH=arm64; make docker-build && make docker-push
        env:
          IMAGE_PROJECT: ${{ secrets.RELEASE_IMAGE_PROJECT }}
          IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
  push-manifests:
    runs-on: ubuntu-latest
    name: merge and push manifests
    needs:
      - build-amd64-image
      - build-arm64-image
    steps:
      - uses: actions/checkout@v2
      - name: Check out specific tag when manually triggered
        if: github.event_name == 'workflow_dispatch'
        run: git fetch --all && git checkout ${{ github.event.inputs.tag }}
      - name: Login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.IMAGE_PUSH_USERNAME }}
          password: ${{ secrets.IMAGE_PUSH_TOKEN }}
      - name: push manifests
        run: make docker-push-manifest
        env:
          IMAGE_PROJECT: ${{ secrets.RELEASE_IMAGE_PROJECT }}
          IMAGE_REPO: ${{ secrets.IMAGE_REPO }}
  release:
    runs-on: ubuntu-latest
    name: release
    needs:
      - push-manifests
    steps:
      - uses: actions/checkout@v2
      - name: Check out specific tag when manually triggered
        if: github.event_name == 'workflow_dispatch'
        run: git fetch --all && git checkout ${{ github.event.inputs.tag }}
      - name: generate release artifacts
        run: make release
      - name: Set release tag
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          else
            echo "RELEASE_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

      - name: Generate draft release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          files: out/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
