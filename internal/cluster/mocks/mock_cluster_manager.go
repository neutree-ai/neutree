// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	v1 "github.com/neutree-ai/neutree/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockClusterManager is an autogenerated mock type for the ClusterManager type
type MockClusterManager struct {
	mock.Mock
}

type MockClusterManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterManager) EXPECT() *MockClusterManager_Expecter {
	return &MockClusterManager_Expecter{mock: &_m.Mock}
}

// ConnectEndpointModel provides a mock function with given fields: ctx, modelRegistry, endpoint
func (_m *MockClusterManager) ConnectEndpointModel(ctx context.Context, modelRegistry v1.ModelRegistry, endpoint v1.Endpoint) error {
	ret := _m.Called(ctx, modelRegistry, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for ConnectEndpointModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ModelRegistry, v1.Endpoint) error); ok {
		r0 = rf(ctx, modelRegistry, endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_ConnectEndpointModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectEndpointModel'
type MockClusterManager_ConnectEndpointModel_Call struct {
	*mock.Call
}

// ConnectEndpointModel is a helper method to define mock.On call
//   - ctx context.Context
//   - modelRegistry v1.ModelRegistry
//   - endpoint v1.Endpoint
func (_e *MockClusterManager_Expecter) ConnectEndpointModel(ctx interface{}, modelRegistry interface{}, endpoint interface{}) *MockClusterManager_ConnectEndpointModel_Call {
	return &MockClusterManager_ConnectEndpointModel_Call{Call: _e.mock.On("ConnectEndpointModel", ctx, modelRegistry, endpoint)}
}

func (_c *MockClusterManager_ConnectEndpointModel_Call) Run(run func(ctx context.Context, modelRegistry v1.ModelRegistry, endpoint v1.Endpoint)) *MockClusterManager_ConnectEndpointModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.ModelRegistry), args[2].(v1.Endpoint))
	})
	return _c
}

func (_c *MockClusterManager_ConnectEndpointModel_Call) Return(_a0 error) *MockClusterManager_ConnectEndpointModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_ConnectEndpointModel_Call) RunAndReturn(run func(context.Context, v1.ModelRegistry, v1.Endpoint) error) *MockClusterManager_ConnectEndpointModel_Call {
	_c.Call.Return(run)
	return _c
}

// DisconnectEndpointModel provides a mock function with given fields: ctx, modelRegistry, endpoint
func (_m *MockClusterManager) DisconnectEndpointModel(ctx context.Context, modelRegistry v1.ModelRegistry, endpoint v1.Endpoint) error {
	ret := _m.Called(ctx, modelRegistry, endpoint)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectEndpointModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, v1.ModelRegistry, v1.Endpoint) error); ok {
		r0 = rf(ctx, modelRegistry, endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_DisconnectEndpointModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DisconnectEndpointModel'
type MockClusterManager_DisconnectEndpointModel_Call struct {
	*mock.Call
}

// DisconnectEndpointModel is a helper method to define mock.On call
//   - ctx context.Context
//   - modelRegistry v1.ModelRegistry
//   - endpoint v1.Endpoint
func (_e *MockClusterManager_Expecter) DisconnectEndpointModel(ctx interface{}, modelRegistry interface{}, endpoint interface{}) *MockClusterManager_DisconnectEndpointModel_Call {
	return &MockClusterManager_DisconnectEndpointModel_Call{Call: _e.mock.On("DisconnectEndpointModel", ctx, modelRegistry, endpoint)}
}

func (_c *MockClusterManager_DisconnectEndpointModel_Call) Run(run func(ctx context.Context, modelRegistry v1.ModelRegistry, endpoint v1.Endpoint)) *MockClusterManager_DisconnectEndpointModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(v1.ModelRegistry), args[2].(v1.Endpoint))
	})
	return _c
}

func (_c *MockClusterManager_DisconnectEndpointModel_Call) Return(_a0 error) *MockClusterManager_DisconnectEndpointModel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_DisconnectEndpointModel_Call) RunAndReturn(run func(context.Context, v1.ModelRegistry, v1.Endpoint) error) *MockClusterManager_DisconnectEndpointModel_Call {
	_c.Call.Return(run)
	return _c
}

// DownCluster provides a mock function with given fields: ctx
func (_m *MockClusterManager) DownCluster(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DownCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_DownCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownCluster'
type MockClusterManager_DownCluster_Call struct {
	*mock.Call
}

// DownCluster is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterManager_Expecter) DownCluster(ctx interface{}) *MockClusterManager_DownCluster_Call {
	return &MockClusterManager_DownCluster_Call{Call: _e.mock.On("DownCluster", ctx)}
}

func (_c *MockClusterManager_DownCluster_Call) Run(run func(ctx context.Context)) *MockClusterManager_DownCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterManager_DownCluster_Call) Return(_a0 error) *MockClusterManager_DownCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_DownCluster_Call) RunAndReturn(run func(context.Context) error) *MockClusterManager_DownCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetDesireStaticWorkersIP provides a mock function with given fields: ctx
func (_m *MockClusterManager) GetDesireStaticWorkersIP(ctx context.Context) []string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetDesireStaticWorkersIP")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockClusterManager_GetDesireStaticWorkersIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDesireStaticWorkersIP'
type MockClusterManager_GetDesireStaticWorkersIP_Call struct {
	*mock.Call
}

// GetDesireStaticWorkersIP is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterManager_Expecter) GetDesireStaticWorkersIP(ctx interface{}) *MockClusterManager_GetDesireStaticWorkersIP_Call {
	return &MockClusterManager_GetDesireStaticWorkersIP_Call{Call: _e.mock.On("GetDesireStaticWorkersIP", ctx)}
}

func (_c *MockClusterManager_GetDesireStaticWorkersIP_Call) Run(run func(ctx context.Context)) *MockClusterManager_GetDesireStaticWorkersIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterManager_GetDesireStaticWorkersIP_Call) Return(_a0 []string) *MockClusterManager_GetDesireStaticWorkersIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_GetDesireStaticWorkersIP_Call) RunAndReturn(run func(context.Context) []string) *MockClusterManager_GetDesireStaticWorkersIP_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields: ctx, nodeIP
func (_m *MockClusterManager) StartNode(ctx context.Context, nodeIP string) error {
	ret := _m.Called(ctx, nodeIP)

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nodeIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type MockClusterManager_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeIP string
func (_e *MockClusterManager_Expecter) StartNode(ctx interface{}, nodeIP interface{}) *MockClusterManager_StartNode_Call {
	return &MockClusterManager_StartNode_Call{Call: _e.mock.On("StartNode", ctx, nodeIP)}
}

func (_c *MockClusterManager_StartNode_Call) Run(run func(ctx context.Context, nodeIP string)) *MockClusterManager_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterManager_StartNode_Call) Return(_a0 error) *MockClusterManager_StartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_StartNode_Call) RunAndReturn(run func(context.Context, string) error) *MockClusterManager_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// StopNode provides a mock function with given fields: ctx, nodeIP
func (_m *MockClusterManager) StopNode(ctx context.Context, nodeIP string) error {
	ret := _m.Called(ctx, nodeIP)

	if len(ret) == 0 {
		panic("no return value specified for StopNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nodeIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_StopNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopNode'
type MockClusterManager_StopNode_Call struct {
	*mock.Call
}

// StopNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeIP string
func (_e *MockClusterManager_Expecter) StopNode(ctx interface{}, nodeIP interface{}) *MockClusterManager_StopNode_Call {
	return &MockClusterManager_StopNode_Call{Call: _e.mock.On("StopNode", ctx, nodeIP)}
}

func (_c *MockClusterManager_StopNode_Call) Run(run func(ctx context.Context, nodeIP string)) *MockClusterManager_StopNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterManager_StopNode_Call) Return(_a0 error) *MockClusterManager_StopNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_StopNode_Call) RunAndReturn(run func(context.Context, string) error) *MockClusterManager_StopNode_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx
func (_m *MockClusterManager) Sync(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type MockClusterManager_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterManager_Expecter) Sync(ctx interface{}) *MockClusterManager_Sync_Call {
	return &MockClusterManager_Sync_Call{Call: _e.mock.On("Sync", ctx)}
}

func (_c *MockClusterManager_Sync_Call) Run(run func(ctx context.Context)) *MockClusterManager_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterManager_Sync_Call) Return(_a0 error) *MockClusterManager_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_Sync_Call) RunAndReturn(run func(context.Context) error) *MockClusterManager_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// UpCluster provides a mock function with given fields: ctx, restart
func (_m *MockClusterManager) UpCluster(ctx context.Context, restart bool) (string, error) {
	ret := _m.Called(ctx, restart)

	if len(ret) == 0 {
		panic("no return value specified for UpCluster")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (string, error)); ok {
		return rf(ctx, restart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) string); ok {
		r0 = rf(ctx, restart)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, restart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterManager_UpCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpCluster'
type MockClusterManager_UpCluster_Call struct {
	*mock.Call
}

// UpCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - restart bool
func (_e *MockClusterManager_Expecter) UpCluster(ctx interface{}, restart interface{}) *MockClusterManager_UpCluster_Call {
	return &MockClusterManager_UpCluster_Call{Call: _e.mock.On("UpCluster", ctx, restart)}
}

func (_c *MockClusterManager_UpCluster_Call) Run(run func(ctx context.Context, restart bool)) *MockClusterManager_UpCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockClusterManager_UpCluster_Call) Return(_a0 string, _a1 error) *MockClusterManager_UpCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterManager_UpCluster_Call) RunAndReturn(run func(context.Context, bool) (string, error)) *MockClusterManager_UpCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterManager creates a new instance of MockClusterManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterManager {
	mock := &MockClusterManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
