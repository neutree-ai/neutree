// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClusterManager is an autogenerated mock type for the ClusterManager type
type MockClusterManager struct {
	mock.Mock
}

type MockClusterManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClusterManager) EXPECT() *MockClusterManager_Expecter {
	return &MockClusterManager_Expecter{mock: &_m.Mock}
}

// DownCluster provides a mock function with given fields: ctx
func (_m *MockClusterManager) DownCluster(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DownCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_DownCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownCluster'
type MockClusterManager_DownCluster_Call struct {
	*mock.Call
}

// DownCluster is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterManager_Expecter) DownCluster(ctx interface{}) *MockClusterManager_DownCluster_Call {
	return &MockClusterManager_DownCluster_Call{Call: _e.mock.On("DownCluster", ctx)}
}

func (_c *MockClusterManager_DownCluster_Call) Run(run func(ctx context.Context)) *MockClusterManager_DownCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterManager_DownCluster_Call) Return(_a0 error) *MockClusterManager_DownCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_DownCluster_Call) RunAndReturn(run func(context.Context) error) *MockClusterManager_DownCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DrainNode provides a mock function with given fields: ctx, nodeID, reason, message, deadlineRemainSeconds
func (_m *MockClusterManager) DrainNode(ctx context.Context, nodeID string, reason string, message string, deadlineRemainSeconds int) error {
	ret := _m.Called(ctx, nodeID, reason, message, deadlineRemainSeconds)

	if len(ret) == 0 {
		panic("no return value specified for DrainNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int) error); ok {
		r0 = rf(ctx, nodeID, reason, message, deadlineRemainSeconds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_DrainNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DrainNode'
type MockClusterManager_DrainNode_Call struct {
	*mock.Call
}

// DrainNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
//   - reason string
//   - message string
//   - deadlineRemainSeconds int
func (_e *MockClusterManager_Expecter) DrainNode(ctx interface{}, nodeID interface{}, reason interface{}, message interface{}, deadlineRemainSeconds interface{}) *MockClusterManager_DrainNode_Call {
	return &MockClusterManager_DrainNode_Call{Call: _e.mock.On("DrainNode", ctx, nodeID, reason, message, deadlineRemainSeconds)}
}

func (_c *MockClusterManager_DrainNode_Call) Run(run func(ctx context.Context, nodeID string, reason string, message string, deadlineRemainSeconds int)) *MockClusterManager_DrainNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].(int))
	})
	return _c
}

func (_c *MockClusterManager_DrainNode_Call) Return(_a0 error) *MockClusterManager_DrainNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_DrainNode_Call) RunAndReturn(run func(context.Context, string, string, string, int) error) *MockClusterManager_DrainNode_Call {
	_c.Call.Return(run)
	return _c
}

// GetHeadIP provides a mock function with given fields: ctx
func (_m *MockClusterManager) GetHeadIP(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHeadIP")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterManager_GetHeadIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHeadIP'
type MockClusterManager_GetHeadIP_Call struct {
	*mock.Call
}

// GetHeadIP is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockClusterManager_Expecter) GetHeadIP(ctx interface{}) *MockClusterManager_GetHeadIP_Call {
	return &MockClusterManager_GetHeadIP_Call{Call: _e.mock.On("GetHeadIP", ctx)}
}

func (_c *MockClusterManager_GetHeadIP_Call) Run(run func(ctx context.Context)) *MockClusterManager_GetHeadIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockClusterManager_GetHeadIP_Call) Return(_a0 string, _a1 error) *MockClusterManager_GetHeadIP_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterManager_GetHeadIP_Call) RunAndReturn(run func(context.Context) (string, error)) *MockClusterManager_GetHeadIP_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields: ctx, nodeIP
func (_m *MockClusterManager) StartNode(ctx context.Context, nodeIP string) error {
	ret := _m.Called(ctx, nodeIP)

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nodeIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type MockClusterManager_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeIP string
func (_e *MockClusterManager_Expecter) StartNode(ctx interface{}, nodeIP interface{}) *MockClusterManager_StartNode_Call {
	return &MockClusterManager_StartNode_Call{Call: _e.mock.On("StartNode", ctx, nodeIP)}
}

func (_c *MockClusterManager_StartNode_Call) Run(run func(ctx context.Context, nodeIP string)) *MockClusterManager_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterManager_StartNode_Call) Return(_a0 error) *MockClusterManager_StartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_StartNode_Call) RunAndReturn(run func(context.Context, string) error) *MockClusterManager_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// StopNode provides a mock function with given fields: ctx, nodeIP
func (_m *MockClusterManager) StopNode(ctx context.Context, nodeIP string) error {
	ret := _m.Called(ctx, nodeIP)

	if len(ret) == 0 {
		panic("no return value specified for StopNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, nodeIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClusterManager_StopNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopNode'
type MockClusterManager_StopNode_Call struct {
	*mock.Call
}

// StopNode is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeIP string
func (_e *MockClusterManager_Expecter) StopNode(ctx interface{}, nodeIP interface{}) *MockClusterManager_StopNode_Call {
	return &MockClusterManager_StopNode_Call{Call: _e.mock.On("StopNode", ctx, nodeIP)}
}

func (_c *MockClusterManager_StopNode_Call) Run(run func(ctx context.Context, nodeIP string)) *MockClusterManager_StopNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockClusterManager_StopNode_Call) Return(_a0 error) *MockClusterManager_StopNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClusterManager_StopNode_Call) RunAndReturn(run func(context.Context, string) error) *MockClusterManager_StopNode_Call {
	_c.Call.Return(run)
	return _c
}

// UpCluster provides a mock function with given fields: ctx, restart
func (_m *MockClusterManager) UpCluster(ctx context.Context, restart bool) (string, error) {
	ret := _m.Called(ctx, restart)

	if len(ret) == 0 {
		panic("no return value specified for UpCluster")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) (string, error)); ok {
		return rf(ctx, restart)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bool) string); ok {
		r0 = rf(ctx, restart)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, bool) error); ok {
		r1 = rf(ctx, restart)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClusterManager_UpCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpCluster'
type MockClusterManager_UpCluster_Call struct {
	*mock.Call
}

// UpCluster is a helper method to define mock.On call
//   - ctx context.Context
//   - restart bool
func (_e *MockClusterManager_Expecter) UpCluster(ctx interface{}, restart interface{}) *MockClusterManager_UpCluster_Call {
	return &MockClusterManager_UpCluster_Call{Call: _e.mock.On("UpCluster", ctx, restart)}
}

func (_c *MockClusterManager_UpCluster_Call) Run(run func(ctx context.Context, restart bool)) *MockClusterManager_UpCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockClusterManager_UpCluster_Call) Return(_a0 string, _a1 error) *MockClusterManager_UpCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClusterManager_UpCluster_Call) RunAndReturn(run func(context.Context, bool) (string, error)) *MockClusterManager_UpCluster_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClusterManager creates a new instance of MockClusterManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClusterManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClusterManager {
	mock := &MockClusterManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
