// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	v1 "github.com/neutree-ai/neutree/api/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockGateway is an autogenerated mock type for the Gateway type
type MockGateway struct {
	mock.Mock
}

type MockGateway_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGateway) EXPECT() *MockGateway_Expecter {
	return &MockGateway_Expecter{mock: &_m.Mock}
}

// DeleteAPIKey provides a mock function with given fields: apiKey
func (_m *MockGateway) DeleteAPIKey(apiKey *v1.ApiKey) error {
	ret := _m.Called(apiKey)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ApiKey) error); ok {
		r0 = rf(apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_DeleteAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAPIKey'
type MockGateway_DeleteAPIKey_Call struct {
	*mock.Call
}

// DeleteAPIKey is a helper method to define mock.On call
//   - apiKey *v1.ApiKey
func (_e *MockGateway_Expecter) DeleteAPIKey(apiKey interface{}) *MockGateway_DeleteAPIKey_Call {
	return &MockGateway_DeleteAPIKey_Call{Call: _e.mock.On("DeleteAPIKey", apiKey)}
}

func (_c *MockGateway_DeleteAPIKey_Call) Run(run func(apiKey *v1.ApiKey)) *MockGateway_DeleteAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.ApiKey))
	})
	return _c
}

func (_c *MockGateway_DeleteAPIKey_Call) Return(_a0 error) *MockGateway_DeleteAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_DeleteAPIKey_Call) RunAndReturn(run func(*v1.ApiKey) error) *MockGateway_DeleteAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBackendService provides a mock function with given fields: cluster
func (_m *MockGateway) DeleteBackendService(cluster *v1.Cluster) error {
	ret := _m.Called(cluster)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackendService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_DeleteBackendService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBackendService'
type MockGateway_DeleteBackendService_Call struct {
	*mock.Call
}

// DeleteBackendService is a helper method to define mock.On call
//   - cluster *v1.Cluster
func (_e *MockGateway_Expecter) DeleteBackendService(cluster interface{}) *MockGateway_DeleteBackendService_Call {
	return &MockGateway_DeleteBackendService_Call{Call: _e.mock.On("DeleteBackendService", cluster)}
}

func (_c *MockGateway_DeleteBackendService_Call) Run(run func(cluster *v1.Cluster)) *MockGateway_DeleteBackendService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Cluster))
	})
	return _c
}

func (_c *MockGateway_DeleteBackendService_Call) Return(_a0 error) *MockGateway_DeleteBackendService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_DeleteBackendService_Call) RunAndReturn(run func(*v1.Cluster) error) *MockGateway_DeleteBackendService_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteRoute provides a mock function with given fields: endpoint
func (_m *MockGateway) DeleteRoute(endpoint *v1.Endpoint) error {
	ret := _m.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Endpoint) error); ok {
		r0 = rf(endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_DeleteRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteRoute'
type MockGateway_DeleteRoute_Call struct {
	*mock.Call
}

// DeleteRoute is a helper method to define mock.On call
//   - endpoint *v1.Endpoint
func (_e *MockGateway_Expecter) DeleteRoute(endpoint interface{}) *MockGateway_DeleteRoute_Call {
	return &MockGateway_DeleteRoute_Call{Call: _e.mock.On("DeleteRoute", endpoint)}
}

func (_c *MockGateway_DeleteRoute_Call) Run(run func(endpoint *v1.Endpoint)) *MockGateway_DeleteRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Endpoint))
	})
	return _c
}

func (_c *MockGateway_DeleteRoute_Call) Return(_a0 error) *MockGateway_DeleteRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_DeleteRoute_Call) RunAndReturn(run func(*v1.Endpoint) error) *MockGateway_DeleteRoute_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with no fields
func (_m *MockGateway) Init() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type MockGateway_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
func (_e *MockGateway_Expecter) Init() *MockGateway_Init_Call {
	return &MockGateway_Init_Call{Call: _e.mock.On("Init")}
}

func (_c *MockGateway_Init_Call) Run(run func()) *MockGateway_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGateway_Init_Call) Return(_a0 error) *MockGateway_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_Init_Call) RunAndReturn(run func() error) *MockGateway_Init_Call {
	_c.Call.Return(run)
	return _c
}

// SyncAPIKey provides a mock function with given fields: apiKey
func (_m *MockGateway) SyncAPIKey(apiKey *v1.ApiKey) error {
	ret := _m.Called(apiKey)

	if len(ret) == 0 {
		panic("no return value specified for SyncAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.ApiKey) error); ok {
		r0 = rf(apiKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_SyncAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncAPIKey'
type MockGateway_SyncAPIKey_Call struct {
	*mock.Call
}

// SyncAPIKey is a helper method to define mock.On call
//   - apiKey *v1.ApiKey
func (_e *MockGateway_Expecter) SyncAPIKey(apiKey interface{}) *MockGateway_SyncAPIKey_Call {
	return &MockGateway_SyncAPIKey_Call{Call: _e.mock.On("SyncAPIKey", apiKey)}
}

func (_c *MockGateway_SyncAPIKey_Call) Run(run func(apiKey *v1.ApiKey)) *MockGateway_SyncAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.ApiKey))
	})
	return _c
}

func (_c *MockGateway_SyncAPIKey_Call) Return(_a0 error) *MockGateway_SyncAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_SyncAPIKey_Call) RunAndReturn(run func(*v1.ApiKey) error) *MockGateway_SyncAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// SyncBackendService provides a mock function with given fields: cluster
func (_m *MockGateway) SyncBackendService(cluster *v1.Cluster) error {
	ret := _m.Called(cluster)

	if len(ret) == 0 {
		panic("no return value specified for SyncBackendService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Cluster) error); ok {
		r0 = rf(cluster)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_SyncBackendService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncBackendService'
type MockGateway_SyncBackendService_Call struct {
	*mock.Call
}

// SyncBackendService is a helper method to define mock.On call
//   - cluster *v1.Cluster
func (_e *MockGateway_Expecter) SyncBackendService(cluster interface{}) *MockGateway_SyncBackendService_Call {
	return &MockGateway_SyncBackendService_Call{Call: _e.mock.On("SyncBackendService", cluster)}
}

func (_c *MockGateway_SyncBackendService_Call) Run(run func(cluster *v1.Cluster)) *MockGateway_SyncBackendService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Cluster))
	})
	return _c
}

func (_c *MockGateway_SyncBackendService_Call) Return(_a0 error) *MockGateway_SyncBackendService_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_SyncBackendService_Call) RunAndReturn(run func(*v1.Cluster) error) *MockGateway_SyncBackendService_Call {
	_c.Call.Return(run)
	return _c
}

// SyncRoute provides a mock function with given fields: endpoint
func (_m *MockGateway) SyncRoute(endpoint *v1.Endpoint) error {
	ret := _m.Called(endpoint)

	if len(ret) == 0 {
		panic("no return value specified for SyncRoute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1.Endpoint) error); ok {
		r0 = rf(endpoint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGateway_SyncRoute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncRoute'
type MockGateway_SyncRoute_Call struct {
	*mock.Call
}

// SyncRoute is a helper method to define mock.On call
//   - endpoint *v1.Endpoint
func (_e *MockGateway_Expecter) SyncRoute(endpoint interface{}) *MockGateway_SyncRoute_Call {
	return &MockGateway_SyncRoute_Call{Call: _e.mock.On("SyncRoute", endpoint)}
}

func (_c *MockGateway_SyncRoute_Call) Run(run func(endpoint *v1.Endpoint)) *MockGateway_SyncRoute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v1.Endpoint))
	})
	return _c
}

func (_c *MockGateway_SyncRoute_Call) Return(_a0 error) *MockGateway_SyncRoute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockGateway_SyncRoute_Call) RunAndReturn(run func(*v1.Endpoint) error) *MockGateway_SyncRoute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGateway creates a new instance of MockGateway. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGateway(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGateway {
	mock := &MockGateway{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
