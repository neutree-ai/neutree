// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	authn "github.com/google/go-containerregistry/pkg/authn"
	mock "github.com/stretchr/testify/mock"
)

// MockImageService is an autogenerated mock type for the ImageService type
type MockImageService struct {
	mock.Mock
}

type MockImageService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockImageService) EXPECT() *MockImageService_Expecter {
	return &MockImageService_Expecter{mock: &_m.Mock}
}

// CheckImageExists provides a mock function with given fields: image, auth
func (_m *MockImageService) CheckImageExists(image string, auth authn.Authenticator) (bool, error) {
	ret := _m.Called(image, auth)

	if len(ret) == 0 {
		panic("no return value specified for CheckImageExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, authn.Authenticator) (bool, error)); ok {
		return rf(image, auth)
	}
	if rf, ok := ret.Get(0).(func(string, authn.Authenticator) bool); ok {
		r0 = rf(image, auth)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, authn.Authenticator) error); ok {
		r1 = rf(image, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageService_CheckImageExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckImageExists'
type MockImageService_CheckImageExists_Call struct {
	*mock.Call
}

// CheckImageExists is a helper method to define mock.On call
//   - image string
//   - auth authn.Authenticator
func (_e *MockImageService_Expecter) CheckImageExists(image interface{}, auth interface{}) *MockImageService_CheckImageExists_Call {
	return &MockImageService_CheckImageExists_Call{Call: _e.mock.On("CheckImageExists", image, auth)}
}

func (_c *MockImageService_CheckImageExists_Call) Run(run func(image string, auth authn.Authenticator)) *MockImageService_CheckImageExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(authn.Authenticator))
	})
	return _c
}

func (_c *MockImageService_CheckImageExists_Call) Return(_a0 bool, _a1 error) *MockImageService_CheckImageExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageService_CheckImageExists_Call) RunAndReturn(run func(string, authn.Authenticator) (bool, error)) *MockImageService_CheckImageExists_Call {
	_c.Call.Return(run)
	return _c
}

// ListImageTags provides a mock function with given fields: imageRepo, auth
func (_m *MockImageService) ListImageTags(imageRepo string, auth authn.Authenticator) ([]string, error) {
	ret := _m.Called(imageRepo, auth)

	if len(ret) == 0 {
		panic("no return value specified for ListImageTags")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, authn.Authenticator) ([]string, error)); ok {
		return rf(imageRepo, auth)
	}
	if rf, ok := ret.Get(0).(func(string, authn.Authenticator) []string); ok {
		r0 = rf(imageRepo, auth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, authn.Authenticator) error); ok {
		r1 = rf(imageRepo, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockImageService_ListImageTags_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListImageTags'
type MockImageService_ListImageTags_Call struct {
	*mock.Call
}

// ListImageTags is a helper method to define mock.On call
//   - imageRepo string
//   - auth authn.Authenticator
func (_e *MockImageService_Expecter) ListImageTags(imageRepo interface{}, auth interface{}) *MockImageService_ListImageTags_Call {
	return &MockImageService_ListImageTags_Call{Call: _e.mock.On("ListImageTags", imageRepo, auth)}
}

func (_c *MockImageService_ListImageTags_Call) Run(run func(imageRepo string, auth authn.Authenticator)) *MockImageService_ListImageTags_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(authn.Authenticator))
	})
	return _c
}

func (_c *MockImageService_ListImageTags_Call) Return(_a0 []string, _a1 error) *MockImageService_ListImageTags_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockImageService_ListImageTags_Call) RunAndReturn(run func(string, authn.Authenticator) ([]string, error)) *MockImageService_ListImageTags_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockImageService creates a new instance of MockImageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockImageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockImageService {
	mock := &MockImageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
