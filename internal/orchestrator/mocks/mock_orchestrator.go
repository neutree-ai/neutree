// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "github.com/neutree-ai/neutree/api/v1"
)

// MockOrchestrator is an autogenerated mock type for the Orchestrator type
type MockOrchestrator struct {
	mock.Mock
}

type MockOrchestrator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrchestrator) EXPECT() *MockOrchestrator_Expecter {
	return &MockOrchestrator_Expecter{mock: &_m.Mock}
}

// ClusterStatus provides a mock function with no fields
func (_m *MockOrchestrator) ClusterStatus() (*v1.RayClusterStatus, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClusterStatus")
	}

	var r0 *v1.RayClusterStatus
	var r1 error
	if rf, ok := ret.Get(0).(func() (*v1.RayClusterStatus, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *v1.RayClusterStatus); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.RayClusterStatus)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrchestrator_ClusterStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterStatus'
type MockOrchestrator_ClusterStatus_Call struct {
	*mock.Call
}

// ClusterStatus is a helper method to define mock.On call
func (_e *MockOrchestrator_Expecter) ClusterStatus() *MockOrchestrator_ClusterStatus_Call {
	return &MockOrchestrator_ClusterStatus_Call{Call: _e.mock.On("ClusterStatus")}
}

func (_c *MockOrchestrator_ClusterStatus_Call) Run(run func()) *MockOrchestrator_ClusterStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrchestrator_ClusterStatus_Call) Return(_a0 *v1.RayClusterStatus, _a1 error) *MockOrchestrator_ClusterStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrchestrator_ClusterStatus_Call) RunAndReturn(run func() (*v1.RayClusterStatus, error)) *MockOrchestrator_ClusterStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CreateCluster provides a mock function with no fields
func (_m *MockOrchestrator) CreateCluster() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrchestrator_CreateCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCluster'
type MockOrchestrator_CreateCluster_Call struct {
	*mock.Call
}

// CreateCluster is a helper method to define mock.On call
func (_e *MockOrchestrator_Expecter) CreateCluster() *MockOrchestrator_CreateCluster_Call {
	return &MockOrchestrator_CreateCluster_Call{Call: _e.mock.On("CreateCluster")}
}

func (_c *MockOrchestrator_CreateCluster_Call) Run(run func()) *MockOrchestrator_CreateCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrchestrator_CreateCluster_Call) Return(_a0 string, _a1 error) *MockOrchestrator_CreateCluster_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrchestrator_CreateCluster_Call) RunAndReturn(run func() (string, error)) *MockOrchestrator_CreateCluster_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCluster provides a mock function with no fields
func (_m *MockOrchestrator) DeleteCluster() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrchestrator_DeleteCluster_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCluster'
type MockOrchestrator_DeleteCluster_Call struct {
	*mock.Call
}

// DeleteCluster is a helper method to define mock.On call
func (_e *MockOrchestrator_Expecter) DeleteCluster() *MockOrchestrator_DeleteCluster_Call {
	return &MockOrchestrator_DeleteCluster_Call{Call: _e.mock.On("DeleteCluster")}
}

func (_c *MockOrchestrator_DeleteCluster_Call) Run(run func()) *MockOrchestrator_DeleteCluster_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrchestrator_DeleteCluster_Call) Return(_a0 error) *MockOrchestrator_DeleteCluster_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrchestrator_DeleteCluster_Call) RunAndReturn(run func() error) *MockOrchestrator_DeleteCluster_Call {
	_c.Call.Return(run)
	return _c
}

// GetDesireStaticWorkersIP provides a mock function with no fields
func (_m *MockOrchestrator) GetDesireStaticWorkersIP() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDesireStaticWorkersIP")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MockOrchestrator_GetDesireStaticWorkersIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDesireStaticWorkersIP'
type MockOrchestrator_GetDesireStaticWorkersIP_Call struct {
	*mock.Call
}

// GetDesireStaticWorkersIP is a helper method to define mock.On call
func (_e *MockOrchestrator_Expecter) GetDesireStaticWorkersIP() *MockOrchestrator_GetDesireStaticWorkersIP_Call {
	return &MockOrchestrator_GetDesireStaticWorkersIP_Call{Call: _e.mock.On("GetDesireStaticWorkersIP")}
}

func (_c *MockOrchestrator_GetDesireStaticWorkersIP_Call) Run(run func()) *MockOrchestrator_GetDesireStaticWorkersIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrchestrator_GetDesireStaticWorkersIP_Call) Return(_a0 []string) *MockOrchestrator_GetDesireStaticWorkersIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrchestrator_GetDesireStaticWorkersIP_Call) RunAndReturn(run func() []string) *MockOrchestrator_GetDesireStaticWorkersIP_Call {
	_c.Call.Return(run)
	return _c
}

// HealthCheck provides a mock function with no fields
func (_m *MockOrchestrator) HealthCheck() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrchestrator_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type MockOrchestrator_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
func (_e *MockOrchestrator_Expecter) HealthCheck() *MockOrchestrator_HealthCheck_Call {
	return &MockOrchestrator_HealthCheck_Call{Call: _e.mock.On("HealthCheck")}
}

func (_c *MockOrchestrator_HealthCheck_Call) Run(run func()) *MockOrchestrator_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrchestrator_HealthCheck_Call) Return(_a0 error) *MockOrchestrator_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrchestrator_HealthCheck_Call) RunAndReturn(run func() error) *MockOrchestrator_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ListNodes provides a mock function with no fields
func (_m *MockOrchestrator) ListNodes() ([]v1.NodeSummary, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ListNodes")
	}

	var r0 []v1.NodeSummary
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]v1.NodeSummary, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []v1.NodeSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.NodeSummary)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrchestrator_ListNodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListNodes'
type MockOrchestrator_ListNodes_Call struct {
	*mock.Call
}

// ListNodes is a helper method to define mock.On call
func (_e *MockOrchestrator_Expecter) ListNodes() *MockOrchestrator_ListNodes_Call {
	return &MockOrchestrator_ListNodes_Call{Call: _e.mock.On("ListNodes")}
}

func (_c *MockOrchestrator_ListNodes_Call) Run(run func()) *MockOrchestrator_ListNodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockOrchestrator_ListNodes_Call) Return(_a0 []v1.NodeSummary, _a1 error) *MockOrchestrator_ListNodes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrchestrator_ListNodes_Call) RunAndReturn(run func() ([]v1.NodeSummary, error)) *MockOrchestrator_ListNodes_Call {
	_c.Call.Return(run)
	return _c
}

// StartNode provides a mock function with given fields: nodeIP
func (_m *MockOrchestrator) StartNode(nodeIP string) error {
	ret := _m.Called(nodeIP)

	if len(ret) == 0 {
		panic("no return value specified for StartNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrchestrator_StartNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartNode'
type MockOrchestrator_StartNode_Call struct {
	*mock.Call
}

// StartNode is a helper method to define mock.On call
//   - nodeIP string
func (_e *MockOrchestrator_Expecter) StartNode(nodeIP interface{}) *MockOrchestrator_StartNode_Call {
	return &MockOrchestrator_StartNode_Call{Call: _e.mock.On("StartNode", nodeIP)}
}

func (_c *MockOrchestrator_StartNode_Call) Run(run func(nodeIP string)) *MockOrchestrator_StartNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrchestrator_StartNode_Call) Return(_a0 error) *MockOrchestrator_StartNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrchestrator_StartNode_Call) RunAndReturn(run func(string) error) *MockOrchestrator_StartNode_Call {
	_c.Call.Return(run)
	return _c
}

// StopNode provides a mock function with given fields: nodeIP
func (_m *MockOrchestrator) StopNode(nodeIP string) error {
	ret := _m.Called(nodeIP)

	if len(ret) == 0 {
		panic("no return value specified for StopNode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(nodeIP)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockOrchestrator_StopNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StopNode'
type MockOrchestrator_StopNode_Call struct {
	*mock.Call
}

// StopNode is a helper method to define mock.On call
//   - nodeIP string
func (_e *MockOrchestrator_Expecter) StopNode(nodeIP interface{}) *MockOrchestrator_StopNode_Call {
	return &MockOrchestrator_StopNode_Call{Call: _e.mock.On("StopNode", nodeIP)}
}

func (_c *MockOrchestrator_StopNode_Call) Run(run func(nodeIP string)) *MockOrchestrator_StopNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockOrchestrator_StopNode_Call) Return(_a0 error) *MockOrchestrator_StopNode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockOrchestrator_StopNode_Call) RunAndReturn(run func(string) error) *MockOrchestrator_StopNode_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrchestrator creates a new instance of MockOrchestrator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrchestrator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrchestrator {
	mock := &MockOrchestrator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
