ARG CANN_VERSION=8.1.rc1
ARG CANN_CHIP=310p
ARG MINDIE_VERSION=2.0.rc2
ARG PYTHON_MAJOR_VERSION=3
ARG PYTHON_MINOR_VERSION=11
ARG PYTHON_PATCH_VERSION=11

FROM ubuntu:22.04 AS base

SHELL ["/bin/bash", "-eo", "pipefail", "-c"]

## Prepare MindIE Install Environment

ARG PYTHON_MAJOR_VERSION
ARG PYTHON_MINOR_VERSION
ARG PYTHON_PATCH_VERSION

ENV DEBIAN_FRONTEND=noninteractive \
    PYTHON_VERSION=${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION} \
    PYTHON_INSTALL_VERSION=${PYTHON_MAJOR_VERSION}.${PYTHON_MINOR_VERSION}.${PYTHON_PATCH_VERSION}

RUN <<EOF
    # Refresh
    apt-get update -y

    apt-get install -y --no-install-recommends \
        ca-certificates build-essential binutils bash openssl \
        gcc g++ \
        make cmake libsqlite3-dev zlib1g-dev libssl-dev libffi-dev libbz2-dev liblzma-dev \
        wget curl

    
    # Install python
    curl -o Python-${PYTHON_INSTALL_VERSION}.tgz https://www.python.org/ftp/python/${PYTHON_INSTALL_VERSION}/Python-${PYTHON_INSTALL_VERSION}.tgz
    tar -xf Python-${PYTHON_INSTALL_VERSION}.tgz && cd Python-${PYTHON_INSTALL_VERSION} && ./configure --prefix=/usr/local/python${PYTHON_INSTALL_VERSION} --enable-loadable-sqlite-extensions --enable-shared && make && make install && cd .. && rm -rf Python-${PYTHON_INSTALL_VERSION} Python-${PYTHON_INSTALL_VERSION}.tgz

    if [ -f /etc/alternatives/python ]; then update-alternatives --remove-all python; fi; update-alternatives --install /usr/bin/python python /usr/local/python${PYTHON_INSTALL_VERSION}/bin/python${PYTHON_VERSION} 10
    if [ -f /etc/alternatives/python3 ]; then update-alternatives --remove-all python3; fi; update-alternatives --install /usr/bin/python3 python3 /usr/local/python${PYTHON_INSTALL_VERSION}/bin/python${PYTHON_VERSION} 10

    # Cleanup
    rm -rf /var/tmp/* \
        && rm -rf /tmp/* \
        && rm -rf /var/cache/apt
EOF

ENV LD_LIBRARY_PATH=/usr/local/python${PYTHON_INSTALL_VERSION}/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/python${PYTHON_INSTALL_VERSION}/bin:$PATH

ARG CANN_VERSION
ARG CANN_CHIP

ENV CANN_VERSION=${CANN_VERSION} \
    CANN_CHIP=${CANN_CHIP} \
    ASCEND_HOME="/usr/local/Ascend"

ENV LD_LIBRARY_PATH=${ASCEND_HOME}/driver/lib64/common:${ASCEND_HOME}/driver/lib64/driver:${ASCEND_HOME}/driver/tools:$LD_LIBRARY_PATH
## Install CANN Toolkit

RUN <<EOF
    OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m)"
    DOWNLOAD_VERSION="$(echo ${CANN_VERSION%\.beta1} | tr '[:lower:]' '[:upper:]')"
    URL_PREFIX="https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/CANN%20${DOWNLOAD_VERSION}"
    URL_SUFFIX="response-content-type=application/octet-stream"

    # Install dependencies
    python3 -m pip install --no-cache-dir --root-user-action ignore --upgrade pip
    pip install --no-cache-dir --root-user-action ignore \
      attrs cython numpy==1.26.4 decorator sympy cffi pyyaml pathlib2 psutil protobuf scipy requests absl-py

    # Install toolkit
    TOOLKIT_FILE="Ascend-cann-toolkit_${DOWNLOAD_VERSION}_${OS}-${ARCH}.run"
    TOOLKIT_PATH="/tmp/${TOOLKIT_FILE}"
    TOOLKIT_URL="${URL_PREFIX}/${TOOLKIT_FILE}?${URL_SUFFIX}"
    curl -H 'Referer: https://www.hiascend.com/' --retry 3 --retry-connrefused -fL -o "${TOOLKIT_PATH}" "${TOOLKIT_URL}"
    chmod a+x "${TOOLKIT_PATH}"
    printf "Y\n" | "${TOOLKIT_PATH}" --install --install-for-all --install-path="${ASCEND_HOME}"

    # Cleanup
    rm -f "${TOOLKIT_PATH}" \
        && rm -rf /var/log/ascend \
        && rm -rf /var/log/ascend_seclog \
        && pip cache purge
EOF

## Install CANN Kernels

RUN <<EOF
    OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m)"
    DOWNLOAD_VERSION="$(echo ${CANN_VERSION%\.beta1} | tr '[:lower:]' '[:upper:]')"
    URL_PREFIX="https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/CANN%20${DOWNLOAD_VERSION}"
    URL_SUFFIX="response-content-type=application/octet-stream"

    # Prepare environment
    source ${ASCEND_HOME}/ascend-toolkit/set_env.sh

    # Install kernels
    KERNELS_FILE="Ascend-cann-kernels-${CANN_CHIP}_${DOWNLOAD_VERSION}_${OS}-${ARCH}.run"
    if ! curl -H 'Referer: https://www.hiascend.com/' --retry 3 --retry-connrefused -fsSIL "${URL_PREFIX}/${KERNELS_FILE}?${URL_SUFFIX}" >/dev/null 2>&1; then
        # Fallback to generic kernels
        KERNELS_FILE="Ascend-cann-kernels-${CANN_CHIP}_${DOWNLOAD_VERSION}_${OS}.run"
    fi
    KERNELS_PATH="/tmp/${KERNELS_FILE}"
    KERNELS_URL="${URL_PREFIX}/${KERNELS_FILE}?${URL_SUFFIX}"
    curl -H 'Referer: https://www.hiascend.com/' --retry 3 --retry-connrefused -fL -o "${KERNELS_PATH}" "${KERNELS_URL}"
    chmod a+x "${KERNELS_PATH}"
    printf "Y\n" |"${KERNELS_PATH}" --install --install-for-all --install-path="${ASCEND_HOME}"

    # Cleanup
    rm -f "${KERNELS_PATH}" \
        && rm -rf /var/log/ascend \
        && rm -rf /var/log/ascend_seclog \
        && pip cache purge
EOF

FROM base AS mindie-install

## Install NNAL

RUN <<EOF
    OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m)"
    DOWNLOAD_VERSION="$(echo ${CANN_VERSION%\.beta1} | tr '[:lower:]' '[:upper:]')"
    URL_PREFIX="https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/CANN/CANN%20${DOWNLOAD_VERSION}"
    URL_SUFFIX="response-content-type=application/octet-stream"

    # Prepare environment
    source ${ASCEND_HOME}/ascend-toolkit/set_env.sh

    # Install NNAL
    NNAL_FILE="Ascend-cann-nnal_${DOWNLOAD_VERSION}_${OS}-${ARCH}.run"
    NNAL_PATH="/tmp/${NNAL_FILE}"
    NNAL_URL="${URL_PREFIX}/${NNAL_FILE}?${URL_SUFFIX}"
    curl -H 'Referer: https://www.hiascend.com/' --retry 3 --retry-connrefused -fL -o "${NNAL_PATH}" "${NNAL_URL}"
    chmod a+x "${NNAL_PATH}"
    printf "Y\n" | "${NNAL_PATH}" --install --install-path="${ASCEND_HOME}"

    # Cleanup
    rm -f "${NNAL_PATH}" \
        && rm -rf /var/log/ascend_seclog \
        && rm -rf /var/log/cann_atb_log \
        && pip cache purge
EOF

## Install PyTorch
RUN <<EOF
    OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m)"
    if [ ${ARCH} == "x86_64" ]; then
        pip install --no-cache-dir --root-user-action ignore torch==2.1.0+cpu --index-url https://download.pytorch.org/whl/cpu
    else
        pip install --no-cache-dir --root-user-action ignore torch==2.1.0
    fi
    pip install --no-cache-dir --root-user-action ignore torch-npu==2.1.0.post12 torchvision==0.16.0
    pip cache purge
EOF

## Install Python dependencies
RUN <<EOF
    cat <<EOT >/tmp/requirements.txt
av==14.3.0
absl-py==2.2.2
attrs==24.3.0
certifi==2024.8.30
cloudpickle==3.0.0
einops==0.8.1
easydict==1.13
frozenlist==1.6.0
gevent==24.2.1
geventhttpclient==2.3.1
greenlet==3.2.1
grpcio==1.71.0
icetk==0.0.4
idna==2.8
jsonlines==4.0.0
jsonschema==4.23.0
jsonschema-specifications==2025.4.1
Jinja2==3.1.6
loguru==0.7.2
matplotlib==3.9.2
ml_dtypes==0.5.0
multidict==6.4.3
nltk==3.9.1
numba==0.61.2
numpy==1.26.4
pandas==2.2.3
pillow==11.2.1
prettytable==3.11.0
pyarrow==19.0.1
pydantic==2.9.2
pydantic_core==2.23.4
python-rapidjson==1.20
requests==2.32.3
sacrebleu==2.4.3
tornado==6.4.2
transformers==4.46.3
tiktoken==0.7.0
typing_extensions==4.13.2
tzdata==2024.2
tqdm==4.67.1
thefuzz==0.22.1
urllib3==2.4.0
zope.event==5.0
zope.interface==7.0.3
EOT
    pip install --no-cache-dir --root-user-action ignore -r /tmp/requirements.txt
    pip cache purge
EOF

## Install ATB Models

COPY --from=docker.io/weihuang080513/mindie:2.0.RC2-300I-Duo-py311-openeuler24.03-lts --chown=root:root ${ASCEND_HOME}/atb-models ${ASCEND_HOME}/atb-models
RUN <<EOF
    pip install --no-cache-dir --root-user-action ignore ${ASCEND_HOME}/atb-models/*.whl
    pip cache purge
EOF

## Install MindIE

ARG MINDIE_VERSION

ENV MINDIE_VERSION=${MINDIE_VERSION}

RUN <<EOF
    # MindIE

    OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
    ARCH="$(uname -m)"
    DOWNLOAD_VERSION="$(echo ${MINDIE_VERSION%\.beta1} | tr '[:lower:]' '[:upper:]')"
    URL_PREFIX="https://ascend-repo.obs.cn-east-2.myhuaweicloud.com/MindIE/MindIE%20${DOWNLOAD_VERSION}"
    URL_SUFFIX="response-content-type=application/octet-stream"

    # Prepare environment
    source ${ASCEND_HOME}/ascend-toolkit/set_env.sh
    source ${ASCEND_HOME}/nnal/atb/set_env.sh

    # Install MindIE
    MINDIE_FILE="Ascend-mindie_${DOWNLOAD_VERSION}_${OS}-${ARCH}.run"
    MINDIE_PATH="/tmp/${MINDIE_FILE}"
    MINDIE_URL="${URL_PREFIX}/${MINDIE_FILE}?${URL_SUFFIX}"
    curl -H 'Referer: https://www.hiascend.com/' --retry 3 --retry-connrefused -fL -o "${MINDIE_PATH}" "${MINDIE_URL}"
    chmod a+x "${MINDIE_PATH}"
    printf "Y\n" | "${MINDIE_PATH}" --install --install-path="${ASCEND_HOME}"

    # Post process
    chmod +w "${ASCEND_HOME}/mindie/latest/mindie-service/conf"

    # Review
    pip freeze \
        && python -m site

    # Cleanup
    rm -f "${MINDIE_PATH}" \
        && rm -rf /var/log/mindie_log \
        && rm -rf ~/log \
        && rm -rf /tmp/* \
        && pip cache purge
EOF

## Install Ray base dependencies
FROM mindie-install AS ray-base

RUN <<EOF
#!/bin/bash

set -euo pipefail

apt-get update -y
apt-get upgrade -y

APT_PKGS=(
    sudo
    tzdata
    git
    libjemalloc-dev
    wget
    cmake
    g++
    zlib1g-dev
    tmux
    screen
    rsync
    netbase
    openssh-client
    gnupg
)

apt-get install -y "${APT_PKGS[@]}"

EOF


FROM ray-base

RUN apt-get update && apt-get install util-linux nfs-common -y

# Install dependencies
RUN --mount=type=bind,src=requirements,target=requirements \
    pip install --no-cache-dir -r requirements/common.txt

ENV HOME=/home/ray
RUN mkdir -p ${HOME}
WORKDIR ${HOME}

# Copy Python files
COPY *.py ./
COPY serve ./serve

RUN chmod +x start.py

EXPOSE 8265 6379 8000

CMD ["/bin/bash"]