// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	v1 "github.com/neutree-ai/neutree/api/v1"
	model_registry "github.com/neutree-ai/neutree/pkg/model_registry"
	mock "github.com/stretchr/testify/mock"
)

// MockModelRegistry is an autogenerated mock type for the ModelRegistry type
type MockModelRegistry struct {
	mock.Mock
}

type MockModelRegistry_Expecter struct {
	mock *mock.Mock
}

func (_m *MockModelRegistry) EXPECT() *MockModelRegistry_Expecter {
	return &MockModelRegistry_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with no fields
func (_m *MockModelRegistry) Connect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Connect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistry_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type MockModelRegistry_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *MockModelRegistry_Expecter) Connect() *MockModelRegistry_Connect_Call {
	return &MockModelRegistry_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *MockModelRegistry_Connect_Call) Run(run func()) *MockModelRegistry_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModelRegistry_Connect_Call) Return(_a0 error) *MockModelRegistry_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistry_Connect_Call) RunAndReturn(run func() error) *MockModelRegistry_Connect_Call {
	_c.Call.Return(run)
	return _c
}

// Disconnect provides a mock function with no fields
func (_m *MockModelRegistry) Disconnect() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockModelRegistry_Disconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Disconnect'
type MockModelRegistry_Disconnect_Call struct {
	*mock.Call
}

// Disconnect is a helper method to define mock.On call
func (_e *MockModelRegistry_Expecter) Disconnect() *MockModelRegistry_Disconnect_Call {
	return &MockModelRegistry_Disconnect_Call{Call: _e.mock.On("Disconnect")}
}

func (_c *MockModelRegistry_Disconnect_Call) Run(run func()) *MockModelRegistry_Disconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModelRegistry_Disconnect_Call) Return(_a0 error) *MockModelRegistry_Disconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistry_Disconnect_Call) RunAndReturn(run func() error) *MockModelRegistry_Disconnect_Call {
	_c.Call.Return(run)
	return _c
}

// HealthyCheck provides a mock function with no fields
func (_m *MockModelRegistry) HealthyCheck() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthyCheck")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MockModelRegistry_HealthyCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthyCheck'
type MockModelRegistry_HealthyCheck_Call struct {
	*mock.Call
}

// HealthyCheck is a helper method to define mock.On call
func (_e *MockModelRegistry_Expecter) HealthyCheck() *MockModelRegistry_HealthyCheck_Call {
	return &MockModelRegistry_HealthyCheck_Call{Call: _e.mock.On("HealthyCheck")}
}

func (_c *MockModelRegistry_HealthyCheck_Call) Run(run func()) *MockModelRegistry_HealthyCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockModelRegistry_HealthyCheck_Call) Return(_a0 bool) *MockModelRegistry_HealthyCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockModelRegistry_HealthyCheck_Call) RunAndReturn(run func() bool) *MockModelRegistry_HealthyCheck_Call {
	_c.Call.Return(run)
	return _c
}

// ListModels provides a mock function with given fields: option
func (_m *MockModelRegistry) ListModels(option model_registry.ListOption) ([]v1.GeneralModel, error) {
	ret := _m.Called(option)

	if len(ret) == 0 {
		panic("no return value specified for ListModels")
	}

	var r0 []v1.GeneralModel
	var r1 error
	if rf, ok := ret.Get(0).(func(model_registry.ListOption) ([]v1.GeneralModel, error)); ok {
		return rf(option)
	}
	if rf, ok := ret.Get(0).(func(model_registry.ListOption) []v1.GeneralModel); ok {
		r0 = rf(option)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.GeneralModel)
		}
	}

	if rf, ok := ret.Get(1).(func(model_registry.ListOption) error); ok {
		r1 = rf(option)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockModelRegistry_ListModels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListModels'
type MockModelRegistry_ListModels_Call struct {
	*mock.Call
}

// ListModels is a helper method to define mock.On call
//   - option model_registry.ListOption
func (_e *MockModelRegistry_Expecter) ListModels(option interface{}) *MockModelRegistry_ListModels_Call {
	return &MockModelRegistry_ListModels_Call{Call: _e.mock.On("ListModels", option)}
}

func (_c *MockModelRegistry_ListModels_Call) Run(run func(option model_registry.ListOption)) *MockModelRegistry_ListModels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(model_registry.ListOption))
	})
	return _c
}

func (_c *MockModelRegistry_ListModels_Call) Return(_a0 []v1.GeneralModel, _a1 error) *MockModelRegistry_ListModels_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockModelRegistry_ListModels_Call) RunAndReturn(run func(model_registry.ListOption) ([]v1.GeneralModel, error)) *MockModelRegistry_ListModels_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockModelRegistry creates a new instance of MockModelRegistry. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockModelRegistry(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockModelRegistry {
	mock := &MockModelRegistry{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
