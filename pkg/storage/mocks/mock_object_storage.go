// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	scheme "github.com/neutree-ai/neutree/pkg/scheme"
	mock "github.com/stretchr/testify/mock"

	storage "github.com/neutree-ai/neutree/pkg/storage"
)

// MockObjectStorage is an autogenerated mock type for the ObjectStorage type
type MockObjectStorage struct {
	mock.Mock
}

type MockObjectStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MockObjectStorage) EXPECT() *MockObjectStorage_Expecter {
	return &MockObjectStorage_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: id, obj
func (_m *MockObjectStorage) Get(id string, obj scheme.Object) error {
	ret := _m.Called(id, obj)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, scheme.Object) error); ok {
		r0 = rf(id, obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStorage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockObjectStorage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - id string
//   - obj scheme.Object
func (_e *MockObjectStorage_Expecter) Get(id interface{}, obj interface{}) *MockObjectStorage_Get_Call {
	return &MockObjectStorage_Get_Call{Call: _e.mock.On("Get", id, obj)}
}

func (_c *MockObjectStorage_Get_Call) Run(run func(id string, obj scheme.Object)) *MockObjectStorage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(scheme.Object))
	})
	return _c
}

func (_c *MockObjectStorage_Get_Call) Return(_a0 error) *MockObjectStorage_Get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStorage_Get_Call) RunAndReturn(run func(string, scheme.Object) error) *MockObjectStorage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: obj, option
func (_m *MockObjectStorage) List(obj scheme.ObjectList, option storage.ListOption) error {
	ret := _m.Called(obj, option)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(scheme.ObjectList, storage.ListOption) error); ok {
		r0 = rf(obj, option)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStorage_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockObjectStorage_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - obj scheme.ObjectList
//   - option storage.ListOption
func (_e *MockObjectStorage_Expecter) List(obj interface{}, option interface{}) *MockObjectStorage_List_Call {
	return &MockObjectStorage_List_Call{Call: _e.mock.On("List", obj, option)}
}

func (_c *MockObjectStorage_List_Call) Run(run func(obj scheme.ObjectList, option storage.ListOption)) *MockObjectStorage_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(scheme.ObjectList), args[1].(storage.ListOption))
	})
	return _c
}

func (_c *MockObjectStorage_List_Call) Return(_a0 error) *MockObjectStorage_List_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStorage_List_Call) RunAndReturn(run func(scheme.ObjectList, storage.ListOption) error) *MockObjectStorage_List_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMetadata provides a mock function with given fields: id, data
func (_m *MockObjectStorage) UpdateMetadata(id string, data scheme.Object) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, scheme.Object) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStorage_UpdateMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMetadata'
type MockObjectStorage_UpdateMetadata_Call struct {
	*mock.Call
}

// UpdateMetadata is a helper method to define mock.On call
//   - id string
//   - data scheme.Object
func (_e *MockObjectStorage_Expecter) UpdateMetadata(id interface{}, data interface{}) *MockObjectStorage_UpdateMetadata_Call {
	return &MockObjectStorage_UpdateMetadata_Call{Call: _e.mock.On("UpdateMetadata", id, data)}
}

func (_c *MockObjectStorage_UpdateMetadata_Call) Run(run func(id string, data scheme.Object)) *MockObjectStorage_UpdateMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(scheme.Object))
	})
	return _c
}

func (_c *MockObjectStorage_UpdateMetadata_Call) Return(_a0 error) *MockObjectStorage_UpdateMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStorage_UpdateMetadata_Call) RunAndReturn(run func(string, scheme.Object) error) *MockObjectStorage_UpdateMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSpec provides a mock function with given fields: id, data
func (_m *MockObjectStorage) UpdateSpec(id string, data scheme.Object) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSpec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, scheme.Object) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStorage_UpdateSpec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSpec'
type MockObjectStorage_UpdateSpec_Call struct {
	*mock.Call
}

// UpdateSpec is a helper method to define mock.On call
//   - id string
//   - data scheme.Object
func (_e *MockObjectStorage_Expecter) UpdateSpec(id interface{}, data interface{}) *MockObjectStorage_UpdateSpec_Call {
	return &MockObjectStorage_UpdateSpec_Call{Call: _e.mock.On("UpdateSpec", id, data)}
}

func (_c *MockObjectStorage_UpdateSpec_Call) Run(run func(id string, data scheme.Object)) *MockObjectStorage_UpdateSpec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(scheme.Object))
	})
	return _c
}

func (_c *MockObjectStorage_UpdateSpec_Call) Return(_a0 error) *MockObjectStorage_UpdateSpec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStorage_UpdateSpec_Call) RunAndReturn(run func(string, scheme.Object) error) *MockObjectStorage_UpdateSpec_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateStatus provides a mock function with given fields: id, data
func (_m *MockObjectStorage) UpdateStatus(id string, data scheme.Object) error {
	ret := _m.Called(id, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, scheme.Object) error); ok {
		r0 = rf(id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockObjectStorage_UpdateStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStatus'
type MockObjectStorage_UpdateStatus_Call struct {
	*mock.Call
}

// UpdateStatus is a helper method to define mock.On call
//   - id string
//   - data scheme.Object
func (_e *MockObjectStorage_Expecter) UpdateStatus(id interface{}, data interface{}) *MockObjectStorage_UpdateStatus_Call {
	return &MockObjectStorage_UpdateStatus_Call{Call: _e.mock.On("UpdateStatus", id, data)}
}

func (_c *MockObjectStorage_UpdateStatus_Call) Run(run func(id string, data scheme.Object)) *MockObjectStorage_UpdateStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(scheme.Object))
	})
	return _c
}

func (_c *MockObjectStorage_UpdateStatus_Call) Return(_a0 error) *MockObjectStorage_UpdateStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockObjectStorage_UpdateStatus_Call) RunAndReturn(run func(string, scheme.Object) error) *MockObjectStorage_UpdateStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockObjectStorage creates a new instance of MockObjectStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockObjectStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockObjectStorage {
	mock := &MockObjectStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
