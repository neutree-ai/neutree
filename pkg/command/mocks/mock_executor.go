// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockExecutor is an autogenerated mock type for the Executor type
type MockExecutor struct {
	mock.Mock
}

type MockExecutor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutor) EXPECT() *MockExecutor_Expecter {
	return &MockExecutor_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, name, args
func (_m *MockExecutor) Execute(ctx context.Context, name string, args []string) ([]byte, error) {
	ret := _m.Called(ctx, name, args)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) ([]byte, error)); ok {
		return rf(ctx, name, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) []byte); ok {
		r0 = rf(ctx, name, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, name, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockExecutor_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - args []string
func (_e *MockExecutor_Expecter) Execute(ctx interface{}, name interface{}, args interface{}) *MockExecutor_Execute_Call {
	return &MockExecutor_Execute_Call{Call: _e.mock.On("Execute", ctx, name, args)}
}

func (_c *MockExecutor_Execute_Call) Run(run func(ctx context.Context, name string, args []string)) *MockExecutor_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockExecutor_Execute_Call) Return(_a0 []byte, _a1 error) *MockExecutor_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_Execute_Call) RunAndReturn(run func(context.Context, string, []string) ([]byte, error)) *MockExecutor_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// ExecuteWithTimeout provides a mock function with given fields: ctx, timeout, name, args
func (_m *MockExecutor) ExecuteWithTimeout(ctx context.Context, timeout time.Duration, name string, args []string) ([]byte, error) {
	ret := _m.Called(ctx, timeout, name, args)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteWithTimeout")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, []string) ([]byte, error)); ok {
		return rf(ctx, timeout, name, args)
	}
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, string, []string) []byte); ok {
		r0 = rf(ctx, timeout, name, args)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, time.Duration, string, []string) error); ok {
		r1 = rf(ctx, timeout, name, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutor_ExecuteWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecuteWithTimeout'
type MockExecutor_ExecuteWithTimeout_Call struct {
	*mock.Call
}

// ExecuteWithTimeout is a helper method to define mock.On call
//   - ctx context.Context
//   - timeout time.Duration
//   - name string
//   - args []string
func (_e *MockExecutor_Expecter) ExecuteWithTimeout(ctx interface{}, timeout interface{}, name interface{}, args interface{}) *MockExecutor_ExecuteWithTimeout_Call {
	return &MockExecutor_ExecuteWithTimeout_Call{Call: _e.mock.On("ExecuteWithTimeout", ctx, timeout, name, args)}
}

func (_c *MockExecutor_ExecuteWithTimeout_Call) Run(run func(ctx context.Context, timeout time.Duration, name string, args []string)) *MockExecutor_ExecuteWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration), args[2].(string), args[3].([]string))
	})
	return _c
}

func (_c *MockExecutor_ExecuteWithTimeout_Call) Return(_a0 []byte, _a1 error) *MockExecutor_ExecuteWithTimeout_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutor_ExecuteWithTimeout_Call) RunAndReturn(run func(context.Context, time.Duration, string, []string) ([]byte, error)) *MockExecutor_ExecuteWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutor creates a new instance of MockExecutor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutor {
	mock := &MockExecutor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
